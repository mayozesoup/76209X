{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\ndrivetrain_gyro = Gyro(brain.three_wire_port.a)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_gyro, 319.19, 320, 40, MM, 1)\nmotor_group_3_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_36_1, False)\nmotor_group_3_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_36_1, True)\nmotor_group_3 = MotorGroup(motor_group_3_motor_a, motor_group_3_motor_b)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Gyro\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Gyro\")\n    drivetrain_gyro.calibrate()\n    while drivetrain_gyro.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\nimport math\n\nx1 = 0\ny1 = 0\n\ndef goto(target_x, target_y, reverse):\n    global x1, y1\n    brain.screen.print(\"Starting from \", x1, y1)\n    brain.screen.next_row()\n    brain.screen.print(\"Going to \", target_x, target_y)\n    brain.screen.next_row()\n    brain.screen.print(\"My heading is\", drivetrain.heading(DEGREES))\n    brain.screen.next_row()\n    #x1 = gps.x_position(MM)\n    #y1 = gps.y_position(MM)\n    #ni mei you ta jia \n    delta_x = target_x - x1\n    delta_y = target_y - y1\n    distance = math.sqrt(delta_x**2 + delta_y**2)     # pythagorean theorem\n    if ( delta_x == 0 ):\n        if ( delta_y < 0):\n            direction = 90\n        else:\n            direction = 270\n    else:\n        direction = - math.atan(delta_y / delta_x) * 180 / math.pi\n    if ( delta_x < 0 ):\n        direction = direction + 180\n    if ( reverse != 0 ):\n        direction = direction + 180\n    if ( direction > 360 ):\n        direction = direction - 360\n    brain.screen.print(\"Now turning heading to\", direction)\n    brain.screen.next_row()\n\n    drivetrain.turn_to_heading(direction, DEGREES, wait=True)\n    brain.screen.print(\"My heading is\", drivetrain.heading(DEGREES))\n    brain.screen.next_row()\n    if ( reverse != 0 ):\n        drivetrain.drive_for(REVERSE, distance, MM, wait=True)\n    else:\n        drivetrain.drive_for(FORWARD, distance, MM, wait=True)\n    brain.screen.print(\"My heading is\", drivetrain.heading(DEGREES))\n    brain.screen.next_row()\n    x1 = target_x\n    y1 = target_y\n\n\n\ndef onauton_autonomous_0():\n    global currentx, currenty\n    currentx = 0\n    currenty = 0\n\n#useless \ndef onevent_controller_1buttonR1_pressed_0():\n    global currentx, currenty\n    motor_group_3.spin(FORWARD)\n\ndef onevent_controller_1buttonR1_released_0():\n    global currentx, currenty\n    motor_group_3.stop()\n\ndef onevent_controller_1buttonR2_pressed_0():\n    global currentx, currenty\n    motor_group_3.spin(REVERSE)\n\ndef onevent_controller_1buttonR2_released_0():\n    global currentx, currenty\n    motor_group_3.stop()\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n    #zao zhang hao zhong guo xian zai wo you bi chilling \n    #wo xi huan bi chilling \n    #lieng ge liang bai yihou \ndef vexcode_driver_function():\n    # Start the driver control tasks\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n\n#helicopta helicopta helicopta helicopta helicopta helicopta \ndef main():\n    brain.screen.print(\"I just started\")\n    brain.screen.next_row()\n   \n    x1 = -1350\n    y1 = 1420\n    goto( -920,  920, 0)\n    goto( -920,-1450, 0)\n    goto(  750,-1400, 0) # blue in right zone\n    goto(  500,-1150, 1)\n#   goto(    0, -950, 0) # m = - 2/5\n    goto( -600, -710, 0) # yellow in left zone\n    goto(  400, -250, 1)\n    goto(    0,    0, 0) # m = - 5/8\n    goto( -600,  200, 0) # yellow in left zone\n    goto(  400,  400, 1)\n    goto(    0,  950, 0)\n    goto( -600,  950, 0) # yellow in left zone\n    goto(  920,  950, 1)\n    goto(  920, 1500, 0)\n    goto( -600, 1320, 0) # red in left zone\n    goto(  600,  600, 1)\n    goto(  600, -600, 1)\n    goto( 1400,-1350, 1)\n    goto( 1500, -900, 0) # red on balance\n    goto( 1500,  100, 0)\n\n\n    goto(1000,1000,0)\n    brain.screen.print(\"I'm done!!\")\n    brain.screen.next_row()\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\n# system event handlers\ncontroller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)\ncontroller_1.buttonR1.released(onevent_controller_1buttonR1_released_0)\ncontroller_1.buttonR2.pressed(onevent_controller_1buttonR2_pressed_0)\ncontroller_1.buttonR2.released(onevent_controller_1buttonR2_released_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nmain()\n","textLanguage":"python","rconfig":[{"port":[2,1,1],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"threewire","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":22},{"port":[3,4],"name":"motor_group_3","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}